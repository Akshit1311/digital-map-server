{"version":3,"sources":["pages/HomePage/CountsBlockComponent.tsx"],"names":["override","css","CountCardWrapper","styled","div","props","active","ThemeColorIdentifier","colorTheme","theme","bgCards","borderColor","color","CountCard","activeCard","name","acc","state","handleCardClick","accessor","loading","useWindowSize","windowWidth","useState","currentCount","setCurrentCount","useContext","ThemeContext","useEffect","interval","count","slice","setInterval","prevState","Number","clearInterval","onClick","className","size","style","padding","alignItems","visibility","background","CountsBlockComponent","cancelToken","selectedArea","countResource","applyRoles","setStateViewMap","setActiveCard","startupType","history","useHistory","getCounts","countLoading","setPrimaryColorTheme","setSelectedArea","setSelectedStateByMap","tableState","selectedStateByMap","appliedFilters","startupCount","CountBlockModel","stateCounts","setStateCounts","query","useWebQuery","fetchCounts","a","cancel","axios","CancelToken","source","post","process","stateId","states","from","registrationFrom","to","registrationTo","roles","token","data","Object","keys","forEach","item","index","delayDebounceFn","setTimeout","clearTimeout","counts","value","toLowerCase","getThemeName","resources","id","get","stateSelected","stateName","push","React","memo"],"mappings":"iUAeMA,EAAWC,cAAG,wFAkCdC,EAAmBC,IAAOC,IAAG,oVAIb,SAACC,GAAU,OAC7BA,EAAMC,OACFC,YAAqBF,EAAMG,YAC3BH,EAAMI,MAAMC,WACE,SAACL,GAAU,OAAKA,EAAMM,eACjC,SAACN,GAAU,OAAMA,EAAMC,OAAS,QAAUD,EAAMI,MAAMG,SAIzC,SAACP,GAAU,OAC7BA,EAAMC,OAAS,yBACR,SAACD,GAAU,OAClBA,EAAMC,OAASD,EAAMI,MAAMG,MAAQ,MAEtB,SAACP,GAAU,OAAMA,EAAMC,OAAS,MAAQ,SAIrDO,EAAY,SAAH,GAUQ,IATrBC,EAAU,EAAVA,WACAC,EAAI,EAAJA,KACAC,EAAG,EAAHA,IACAC,EAAK,EAALA,MACAN,EAAW,EAAXA,YACAO,EAAe,EAAfA,gBACAC,EAAQ,EAARA,SACAC,EAAO,EAAPA,QACAZ,EAAU,EAAVA,WAAU,EAE0Ba,cAAe,mBAA5CC,EAAW,KAAc,QACQC,mBAAiB,IAAE,mBAApDC,EAAY,KAAEC,EAAe,KAC9BnB,EAASS,IAASD,EAClBL,EAAQiB,qBAAWC,KAyDzB,OAxDAC,qBAAU,WACR,IAMMC,EAsBAA,EA5BAC,EAAQb,EAAME,GAAsBJ,EAAKgB,MAAM,GAAI,IAKzD,OAJc,IAAVD,GACFL,EAAgB,GAGdK,GAASA,EAAQN,GAEfA,EAAeM,EACjBD,EAAWG,aAAY,WACrBP,GAAgB,SAACQ,GACf,OAAIA,IAAcC,OAAOJ,IAAUG,EAAYC,OAAOJ,GAC7CA,EAELA,EAAQ,IACHG,EAAY,IAEjBH,EAAQ,KAAQA,EAAQ,IACnBG,EAAY,IAEdA,EAAY,OAEpB,GACMT,IAAiBM,GAC1BK,cAAcN,GAGT,kBAAMM,cAAcN,KAClBC,GAASA,EAAQN,GAEtBA,EAAeM,EACjBD,EAAWG,aAAY,WACrBP,GAAgB,SAACQ,GACf,OAAIA,IAAcC,OAAOJ,IAAUG,EAAYC,OAAOJ,GAC7CA,EAELN,EAAeM,EAAQ,IAClBG,EAAY,IAEjBT,EAAeM,EAAQ,IAClBG,EAAY,IAEjBT,EAAeM,EAAQ,IAClBG,EAAY,IAEdA,EAAY,OAEpB,GACMT,IAAiBM,GAC1BK,cAAcN,GAGT,kBAAMM,cAAcN,UAxBtB,IA0BN,CAACZ,EAAOG,IAGT,eAAClB,EAAgB,CACfM,WAAYA,EACZ4B,QAAS,kBAAMlB,EAAgBH,EAAMC,IACrCV,OAAQA,EACRK,YAAaA,EACb0B,UAAS,qCAAuC,UAE/CjB,EACC,qBAAKiB,UAAU,+DAA8D,SAC3E,cAAC,IAAU,CACTzB,MAAON,EAAS,QAAUC,YAAqBC,GAC/CY,SAAS,EACTkB,KAAM,OACNrC,IAAKD,MAIT,8BAEAoB,GACA,sBACEiB,UAAU,oDACVE,MAAO,CAAEC,QAAS,UAAWC,WAAY,SAAU,UAEnD,oBACEJ,UAAU,uBACVE,MAAO,CACL3B,MAAQN,EAAuB,GAAdG,EAAMG,MACvB8B,WAAYpB,EAAc,KAAOhB,EAAS,UAAY,UACtD,SAEgB,IAAjBkB,EAAqB,IAAMA,IAE9B,gCACE,oBACEe,MAAO,CACL3B,MAAQN,EAEJgB,EAAc,IACdf,YAAqBC,GACrB,GAHAC,EAAMG,OAKZyB,UAAU,gBAAe,SAExBtB,IAEH,qBACEsB,UAAS,oCACTE,MAAO,CACLG,WAAYpC,EAAS,UAAY,SACjCqC,WAAYpC,YAAqBC,gBAe3CoC,EAAuB,SAAH,GAQF,IAqBlBC,EA5BJC,EAAY,EAAZA,aACAC,EAAa,EAAbA,cACAC,EAAU,EAAVA,WACAC,EAAe,EAAfA,gBACAnC,EAAU,EAAVA,WACAoC,EAAa,EAAbA,cACAC,EAAW,EAAXA,YAEM1C,EAAQiB,qBAAWC,KACnByB,EAAUC,cAId7C,GAUEuC,EAXFO,UAWEP,EAVFvC,YAEA+C,EAQER,EARFQ,aACAC,EAOET,EAPFS,qBACAC,EAMEV,EANFU,gBAGAC,GAGEX,EALFY,WAKEZ,EAJFa,mBAIEb,EAHFW,uBACAG,EAEEd,EAFFc,eACAC,EACEf,EADFe,aAAY,EAEwBvC,mBAAc,IAAIwC,KAAkB,mBAAnEC,EAAW,KAAEC,EAAc,KAG5BC,EAAQC,cAERC,EAAW,uCAAG,gCAAAC,EAAA,sDAOuB,MALf,oBAAfxB,GACTA,EAAYyB,OAAO,0CAIrBzB,EAAc0B,IAAMC,YAAYC,SAAS,kBAEhBF,IAAMG,KAAK,GAAD,OAZpBC,uCAaA,+CAENd,GAAc,IACjBe,QAASf,EAAegB,OAAO,GAC/BC,KAAMjB,EAAekB,iBACrBC,GAAInB,EAAeoB,eACnBC,MAAO,CACL,UACA,SACA,WAEA,YACA,iBAGJ,CAAErC,YAAaA,EAAYsC,QAC3B,KAAD,WAjBOC,EAAI,EAAJA,KAmBFtD,EAAa,IAAIiC,IAEvBsB,OAAOC,KAAKF,GAAMG,SAAQ,SAACC,GACE,OAAZ,OAAXrC,QAAW,IAAXA,OAAW,EAAXA,EAAasC,QAA0B,YAATD,EAChC1D,EAAM0D,GAAQ1B,EAEdhC,EAAM0D,GAAQJ,EAAKI,MAGvBvB,EAAenC,GAAO,4GAEzB,kBAvCgB,mCAyCjBF,qBAAU,WACR,IAAM8D,EAAkBC,YAAW,WACjCvB,MACC,KACH,OAAO,WACLwB,aAAaF,MAEd,CAAC7B,EAAgBC,IAEpBlC,qBAAU,WACmB,OAAZ,OAAXuB,QAAW,IAAXA,OAAW,EAAXA,EAAasC,QAAgC,aAAf3E,GAChCI,EAAgB,WAAY,aAE7B,CAACiC,IAEJvB,qBAAU,WACR,IAAMiE,EAAM,eAAQ7B,GACpB6B,EAAgB,QAAI/B,EACpBG,EAAe4B,KACd,CAAC/B,IAEJ,IAUM5C,EAAkB,SAACH,EAAcI,GACrC6B,EAAW7B,EAAUJ,GACrBmC,EAAcnC,GACdyC,EAbmB,SAACzC,GACpB,IAAM+E,EAAQ/E,EAAKgF,cACnB,MAAc,aAAVD,EAA6B,UACnB,YAAVA,EAA4B,UAClB,eAAVA,EAA+B,UACrB,cAAVA,EAA8B,UACpB,iBAAVA,EAAiC,UACvB,iBAAVA,EAAiC,eAArC,EAMqBE,CAAajF,KAG9BkF,EAAY,CAChBnF,aACAI,kBACAD,MAAO+C,EACP5C,QAASmC,EACT/C,cAGI0F,EAAKhC,EAAMiC,IAAI,SACfC,EAAuB,UAAPF,GAAkBA,EAAKA,EAAK,KAElD,OACE,sBAAK7D,UAAU,+CAA8C,UAC3D,qBAAKA,UAAU,gBAAe,SAC5B,sBAAKA,UAAU,wCAAuC,UAEpD,cAAC,IAAE,CACD/B,OAAQ8F,EACR5F,WAAYA,EACZ4B,QAAS,WACFgE,IACL3C,EAAgB,CAAEyC,GAAI,QAASG,UAAW,UAC1C3C,EAAsB,CACpBwC,GAAI,GACJnF,KAAM,KAERkC,GAAgB,GAChBG,EAAQkD,KAAK,YAEfjE,UAAS,eAAU+D,EAAgB,aAAe,IAAK,mBAIxDA,GAA2C,SAA1BtD,EAAauD,UAC7B,mCACE,sBAAKhE,UAAU,iCAAgC,UAC7C,mBAAGE,MAAO,CAAE3B,MAAOH,EAAMG,OAASyB,UAAU,oBAAmB,SAC5D,MAEH,mBACEE,MAAO,CAAE3B,MAAOH,EAAMG,OACtByB,UAAU,2BAA0B,SAEnCS,EAAauD,iBAKpB,kCAIN,sBAAKhE,UAAU,4CAA2C,UACxD,cAACxB,EAAS,2BACJoF,GAAS,IACbtF,YAAY,UACZQ,SAAS,UACTJ,KAAK,WACLC,IAAK,aAEP,cAACH,EAAS,2BACJoF,GAAS,IACbtF,YAAY,UACZQ,SAAS,SACTH,IAAK,SACLD,KAAK,aAEP,cAACF,EAAS,2BACJoF,GAAS,IACbtF,YAAY,UACZI,KAAK,aACLC,IAAI,eAEN,cAACH,EAAS,2BACJoF,GAAS,IACbtF,YAAY,UACZI,KAAK,YACLC,IAAI,cAEN,cAACH,EAAS,2BACJoF,GAAS,IACbtF,YAAY,UACZI,KAAK,eACLC,IAAI,wBAcCuF,cAAMC,KAAK5D,I","file":"static/js/15.8755cb60.chunk.js","sourcesContent":["import { css } from \"@emotion/react\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MoonLoader from \"react-spinners/MoonLoader\";\r\nimport styled from \"styled-components\";\r\nimport { CountBlockModel } from \".\";\r\nimport { ThemeContext } from \"../../config/context\";\r\nimport { ThemeColorIdentifier } from \"../../helper-function/themeColor\";\r\nimport { useWebQuery } from \"../../hooks/useWebQuery\";\r\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\r\nimport \"../../scss/HomePageStyles/countBlockComponent.scss\";\r\nimport { H5 } from \"../../styles-components/Heading\";\r\nimport { IDType } from \"./Map/variables\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\ninterface CountBlockTypes {\r\n  selectedArea: IDType;\r\n  countResource: any;\r\n  applyRoles: any;\r\n  setStateViewMap: React.Dispatch<boolean>;\r\n  activeCard: string;\r\n  setActiveCard: any;\r\n  startupType: any;\r\n}\r\n\r\ninterface CountCardTypes {\r\n  name: string;\r\n  state: any;\r\n  acc?: string;\r\n  activeCard: string;\r\n  handleCardClick: any;\r\n  borderColor: string;\r\n  accessor?: string;\r\n  loading: boolean;\r\n  colorTheme: string;\r\n}\r\n\r\ninterface CountCardWrapperTypes {\r\n  active: boolean;\r\n  borderColor: string;\r\n  colorTheme: string;\r\n}\r\n\r\nconst CountCardWrapper = styled.div<CountCardWrapperTypes>`\r\n  border-radius: 4px;\r\n  height: 76px;\r\n  top: 43px;\r\n  background-color: ${(props: any) =>\r\n    props.active\r\n      ? ThemeColorIdentifier(props.colorTheme)\r\n      : props.theme.bgCards};\r\n  border: 2px solid ${(props: any) => props.borderColor};\r\n  color: ${(props: any) => (props.active ? \"white\" : props.theme.color)};\r\n  transition: 0.5s color;\r\n  @media (max-width: 768px) {\r\n    border: none;\r\n    background-color: ${(props: any) =>\r\n      props.active ? \"rgba(255,255,255,0)\" : \"rgba(255,255,255,0)\"} !important;\r\n    color: ${(props: any) =>\r\n      props.active ? props.theme.color : \"\"} !important;\r\n    height: 82px;\r\n    font-weight: ${(props: any) => (props.active ? \"600\" : \"500\")};\r\n  }\r\n`;\r\n\r\nconst CountCard = ({\r\n  activeCard,\r\n  name,\r\n  acc,\r\n  state,\r\n  borderColor,\r\n  handleCardClick,\r\n  accessor,\r\n  loading,\r\n  colorTheme,\r\n}: CountCardTypes) => {\r\n  const [windowWidth, windowHeight] = useWindowSize();\r\n  const [currentCount, setCurrentCount] = useState<number>(0);\r\n  const active = name === activeCard;\r\n  const theme = useContext(ThemeContext);\r\n  useEffect(() => {\r\n    const count = state[accessor ? accessor : name.slice(0, -1)];\r\n    if (count === 0) {\r\n      setCurrentCount(0);\r\n    }\r\n\r\n    if (count && count > currentCount) {\r\n      let interval: any;\r\n      if (currentCount < count) {\r\n        interval = setInterval(() => {\r\n          setCurrentCount((prevState) => {\r\n            if (prevState === Number(count) || prevState > Number(count)) {\r\n              return count;\r\n            }\r\n            if (count > 1000) {\r\n              return prevState + 1000;\r\n            }\r\n            if (count < 1000 && count > 500) {\r\n              return prevState + 200;\r\n            }\r\n            return prevState + 1;\r\n          });\r\n        }, 1);\r\n      } else if (currentCount === count) {\r\n        clearInterval(interval);\r\n      } else {\r\n      }\r\n      return () => clearInterval(interval);\r\n    } else if (count && count < currentCount) {\r\n      let interval: any;\r\n      if (currentCount > count) {\r\n        interval = setInterval(() => {\r\n          setCurrentCount((prevState) => {\r\n            if (prevState === Number(count) || prevState < Number(count)) {\r\n              return count;\r\n            }\r\n            if (currentCount - count > 10000) {\r\n              return prevState - 500;\r\n            }\r\n            if (currentCount - count > 5000) {\r\n              return prevState - 200;\r\n            }\r\n            if (currentCount - count > 1000) {\r\n              return prevState - 100;\r\n            }\r\n            return prevState - 1;\r\n          });\r\n        }, 1);\r\n      } else if (currentCount === count) {\r\n        clearInterval(interval);\r\n      } else {\r\n      }\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [state, loading]);\r\n\r\n  return (\r\n    <CountCardWrapper\r\n      colorTheme={colorTheme}\r\n      onClick={() => handleCardClick(name, acc)}\r\n      active={active}\r\n      borderColor={borderColor}\r\n      className={`col-md count-single-card p-0 w-100`}\r\n    >\r\n      {loading ? (\r\n        <div className=\"w-100 h-100 d-flex justify-content-center align-items-center\">\r\n          <MoonLoader\r\n            color={active ? \"white\" : ThemeColorIdentifier(colorTheme)}\r\n            loading={true}\r\n            size={\"25px\"}\r\n            css={override}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {!loading && (\r\n        <div\r\n          className=\" d-flex flex-column h-100 justify-content-between\"\r\n          style={{ padding: \"0.83rem\", alignItems: \"start\" }}\r\n        >\r\n          <h4\r\n            className=\"m-0 p-0 count-number\"\r\n            style={{\r\n              color: !active ? theme.color : \"\",\r\n              visibility: windowWidth > 768 || active ? \"visible\" : \"hidden\",\r\n            }}\r\n          >\r\n            {currentCount === 0 ? \"-\" : currentCount}\r\n          </h4>\r\n          <div>\r\n            <h6\r\n              style={{\r\n                color: !active\r\n                  ? theme.color\r\n                  : windowWidth < 768\r\n                  ? ThemeColorIdentifier(colorTheme)\r\n                  : \"\",\r\n              }}\r\n              className=\"mx-0 mb-0 p-0\"\r\n            >\r\n              {name}\r\n            </h6>\r\n            <div\r\n              className={`count-underline d-block d-sm-none`}\r\n              style={{\r\n                visibility: active ? \"visible\" : \"hidden\",\r\n                background: ThemeColorIdentifier(colorTheme),\r\n              }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </CountCardWrapper>\r\n  );\r\n};\r\n\r\ninterface KeyValuePair {\r\n  id: string;\r\n  value: string;\r\n}\r\n\r\nconst CountsBlockComponent = ({\r\n  selectedArea,\r\n  countResource,\r\n  applyRoles,\r\n  setStateViewMap,\r\n  activeCard,\r\n  setActiveCard,\r\n  startupType,\r\n}: CountBlockTypes) => {\r\n  const theme = useContext(ThemeContext);\r\n  const history = useHistory();\r\n\r\n  const {\r\n    getCounts,\r\n    colorTheme,\r\n    // countState,\r\n    countLoading,\r\n    setPrimaryColorTheme,\r\n    setSelectedArea,\r\n    tableState,\r\n    selectedStateByMap,\r\n    setSelectedStateByMap,\r\n    appliedFilters,\r\n    startupCount,\r\n  } = countResource;\r\n  const [stateCounts, setStateCounts] = useState<any>(new CountBlockModel());\r\n\r\n  const BASE_URL = process.env.REACT_APP_BACKEND_ENDPOINT;\r\n  const query = useWebQuery();\r\n  let cancelToken: any;\r\n  const fetchCounts = async () => {\r\n    //Check if there are any previous pending requests\r\n    if (typeof cancelToken != typeof undefined) {\r\n      cancelToken.cancel(\"Operation canceled due to new request.\");\r\n    }\r\n\r\n    //Save the cancel token for the current request\r\n    cancelToken = axios.CancelToken.source();\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${BASE_URL}/home/topNumbers`,\r\n        {\r\n          ...appliedFilters,\r\n          stateId: appliedFilters.states[0],\r\n          from: appliedFilters.registrationFrom,\r\n          to: appliedFilters.registrationTo,\r\n          roles: [\r\n            \"Startup\",\r\n            \"Mentor\",\r\n            \"Investor\",\r\n            // \"GovernmentBody\",\r\n            \"Incubator\",\r\n            \"Accelerator\",\r\n          ],\r\n        },\r\n        { cancelToken: cancelToken.token }\r\n      );\r\n\r\n      const count: any = new CountBlockModel();\r\n\r\n      Object.keys(data).forEach((item: string) => {\r\n        if (startupType?.index !== \"0\" && item === \"Startup\") {\r\n          count[item] = startupCount;\r\n        } else {\r\n          count[item] = data[item];\r\n        }\r\n      });\r\n      setStateCounts(count);\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    const delayDebounceFn = setTimeout(() => {\r\n      fetchCounts();\r\n    }, 100);\r\n    return () => {\r\n      clearTimeout(delayDebounceFn);\r\n    };\r\n  }, [appliedFilters, startupCount]);\r\n\r\n  useEffect(() => {\r\n    if (startupType?.index !== \"1\" && activeCard !== \"Startups\") {\r\n      handleCardClick(\"Startups\", \"Startup\");\r\n    }\r\n  }, [startupType]);\r\n\r\n  useEffect(() => {\r\n    const counts = { ...stateCounts };\r\n    counts[\"Startup\"] = startupCount;\r\n    setStateCounts(counts);\r\n  }, [startupCount]);\r\n\r\n  const getThemeName = (name: string) => {\r\n    const value = name.toLowerCase();\r\n    if (value === \"startups\") return \"theme-1\";\r\n    if (value === \"mentors\") return \"theme-3\";\r\n    if (value === \"incubators\") return \"theme-4\";\r\n    if (value === \"investors\") return \"theme-5\";\r\n    if (value === \"accelerators\") return \"theme-6\";\r\n    if (value === \"institutions\") return \"theme-7\";\r\n  };\r\n\r\n  const handleCardClick = (name: string, accessor: string) => {\r\n    applyRoles(accessor, name);\r\n    setActiveCard(name);\r\n    setPrimaryColorTheme(getThemeName(name));\r\n  };\r\n\r\n  const resources = {\r\n    activeCard,\r\n    handleCardClick,\r\n    state: stateCounts,\r\n    loading: countLoading,\r\n    colorTheme,\r\n  };\r\n\r\n  const id = query.get(\"state\");\r\n  const stateSelected = id !== \"india\" || id ? id : null;\r\n\r\n  return (\r\n    <div className=\"container-fluid count-block-styles px-0 mx-0\">\r\n      <div className=\"row mx-0 px-0\">\r\n        <div className=\"d-flex mt-3 px-0 align-items-baseline\">\r\n          {/* <H5>{selectedArea.stateName}</H5> */}\r\n          <H5\r\n            active={stateSelected}\r\n            colorTheme={colorTheme}\r\n            onClick={() => {\r\n              if (!stateSelected) return;\r\n              setSelectedArea({ id: \"india\", stateName: \"India\" });\r\n              setSelectedStateByMap({\r\n                id: \"\",\r\n                name: \"\",\r\n              });\r\n              setStateViewMap(false);\r\n              history.push(\"/maps/\");\r\n            }}\r\n            className={`mb-3 ${stateSelected ? \"text-theme\" : \"\"}`}\r\n          >\r\n            India\r\n          </H5>\r\n          {stateSelected && selectedArea.stateName != \"India\" ? (\r\n            <>\r\n              <div className=\"d-flex ms-2 align-items-center\">\r\n                <p style={{ color: theme.color }} className=\"m-0 p-0 font-12px\">\r\n                  {\">\"}\r\n                </p>\r\n                <p\r\n                  style={{ color: theme.color }}\r\n                  className=\"p-0 m-0 state-label ms-2\"\r\n                >\r\n                  {selectedArea.stateName}\r\n                </p>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"d-inline-flex count-div horizontal-scroll\">\r\n        <CountCard\r\n          {...resources}\r\n          borderColor=\"#0177FA\"\r\n          accessor=\"Startup\"\r\n          name=\"Startups\"\r\n          acc={\"Startup\"}\r\n        />\r\n        <CountCard\r\n          {...resources}\r\n          borderColor=\"#ED8E00\"\r\n          accessor=\"Mentor\"\r\n          acc={\"Mentor\"}\r\n          name=\"Mentors\"\r\n        />\r\n        <CountCard\r\n          {...resources}\r\n          borderColor=\"#7838e0\"\r\n          name=\"Incubators\"\r\n          acc=\"Incubator\"\r\n        />\r\n        <CountCard\r\n          {...resources}\r\n          borderColor=\"#BDAA00\"\r\n          name=\"Investors\"\r\n          acc=\"Investor\"\r\n        />\r\n        <CountCard\r\n          {...resources}\r\n          borderColor=\"#CB3535\"\r\n          name=\"Accelerators\"\r\n          acc=\"Accelerator\"\r\n        />\r\n        {/* <CountCard\r\n          {...resources}\r\n          borderColor=\"#00AD11\"\r\n          accessor=\"GovernmentBody\"\r\n          acc=\"GovernmentBody\"\r\n          name=\"Institutions\"\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(CountsBlockComponent);\r\n"],"sourceRoot":""}